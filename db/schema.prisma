// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
model User {
  // default fields
  id             String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // common fields
  userType       Role     @default(WORKER)                     // Define user's role(Worker, Hirer, Arbitrator, Admin)
  firstName      String                                        // User's first name
  lastName       String                                        // User's last name
  email          String   @unique                              // User's email address
  phone          String?  @unique                              // User's phone number
  address        String?                                       // User's address
  photo          String                                        // User's profile photo
  confirmed      Boolean  @default(false)                      // Define if account registration is confimred
  lastSignIn     DateTime @default(now())                      // User's last sign in date
  location       String?                                       // User's location
  language       String?                                       // User's language
  timezone       String?                                       // User's timezone
  isOnline       Boolean  @default(false)                      // Define if user is online  
  
  // fields required for worker
  story          String                                        // Worker's story
  website        String?                                       // Worker's portfolio website
  video          String?                                       // Worker's intro video url
  visibility     VisibilityType  @default(PUBLIC)              // Define worker's profile visibility
  expertiseLevel ExpertiseLevel  @default(BEGINNER)            // Define worker's expertise
  limitPerDay    Int  @default(10)                             // Max number of proposals to be applied by talent per day
  favProjects    Project[]  @relation(fields: [favProjectsIds])// Worker's favorite projects
  favProjectsIds String[]   @db.Array(ObjectId)
  favCompanies   String[]                                      // Worker's favorite companies
  education      String?                                       // Worker's education history
  degree         String?                                       // Worker's professional degree
  // categories     Category[]                                    // Worker's categories
  // skills         Skill[]                                       // Worker's skills
  resume         String?

  // fields required for hirer
  companyName    String                                        // Company name
  offerLimit     Int  @default(1)                              // Max number of jobs to be offered by company
  postLimit      Int  @default(3)                              // Max number of jobs to be posted by company
  logo           String?                                       // Company's logo url
  favTalentsIds  String[]  @db.Array(ObjectId)                 
  // favTalents     User[]    @relation(fields: [favTalentsIds])  // favorite talents by hirer

  // credentials
  userId         String   @unique
  hashedPassword String
  tokens   Token[]
  sessions Session[]
}

model Project {
  id                String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  title             String                                       // Project title
  description       String                                       // Project description
  budget            Float                                        // Project budget
  categoriesIds     String[]   @db.Array(ObjectId)               // Project id array of categories
  // categories        Category[]                                   // Project categories
  skillsIds         String[]   @db.Array(ObjectId)               // Project id array of skills
  // skills            Skill[]    @relation(fields: [skillsIds])    // Project skills
  timezone          String                                       // Project timezone
  expertiseLevel    ExpertiseLevel  @default(BEGINNER)           // Project required talent's expertise level
  hirerId           String          @db.ObjectId                 // Hirer id
  // hierer            User            @relation(fields: [hirerId]) // Hirer
  status            ProjectStatus   @default(ACTIVE)             // Define project status
  contractsIds      String          @db.Array(ObjectId)          // array of contract ids
  // contracts         Contract[]      @relation(fields: [contractsIds]) // contacts
  closeAt           DateTime                                     // Project close date
  keywords          String[]                                     // Project keywords
  attachement       String[]                                     // Project attachement file path
}

model Contract {
  id                String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}



model Category {
  id             String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  categoryName   String
}

model Skill {
  id             String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  skillName      String
}

model Session {
  id                 String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Token {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@unique([hashedToken, type])
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum Role {
  WORKER
  HIRER
  ARBITRATOR
  ADMIN
}

// Worker's visibility
enum VisibilityType {
  PRIVATE    // The user can only see his/her profile
  REGISTERED // Registered users can see the profile
  PUBLIC     // Any can see the profile
}

// Worker's expertise level
enum ExpertiseLevel {
  BEGINNER       // Beginner level
  INTERMEDIATE   // Intermediate level
  EXPERT         // Expert level
}
// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }
